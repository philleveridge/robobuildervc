#summary Writing C# based programs with RobobuilderLib

= Introduction =

This wiki explains how to use the RobobuilderLib library with your on C# code running on a PC to remotely control Robobuilder humanoid robot. For details on the to core classes see the following
  * [http://code.google.com/p/robobuildervc/wiki/PCRemote PCRemote]
  * [http://code.google.com/p/robobuildervc/wiki/wckMotion wckMotion]
  * [http://code.google.com/p/robobuildervc/wiki/vectors vectors]
  * [http://code.google.com/p/robobuildervc/wiki/Matrix Matrix]
  * Trigger

= Details =

Two basic examples
  * Console based application
  * Forms based

= Console based Example =

Download C# VS2005 demo files:
http://robobuilderlib.googlecode.com/files/demo.zip

Here's sample code:

{{{
using System;
using RobobuilderLib;

namespace Demo
{
    class Program
    {
        public PCremote p;
        public wckMotion w;
        public int nos = 0;

        public void standup()
        {
            if (nos < 16) return;
            w.PlayPose(1000, 10, wckMotion.basic16, true);
        }

        int countServos(int m)
        {
            for (int i = 0; i < m; i++)
            {
                if (!w.wckReadPos(i))
                {
                    nos = i;
                    return i;
                }
            }
            nos = m;
            return m;
        }

        public bool testServo(int id)
        {
            return w.wckReadPos(id);
        }

        static void Main(string[] args)
        {
            string port = "COM5";
            if (args.Length > 0) port = args[0];

            Program g = new Program();
            g.p = new PCremote(port);
            g.w = new wckMotion(g.p);

            Console.WriteLine("Demo - Port: {0} - {1} servos", port, g.countServos(22));

            if (g.testServo(30))
            {
                Console.WriteLine("DCMP mode assumed");
                g.w.DCMP = true;
            }
            else
            {
                Console.WriteLine("Standard firmware assumed {0}", g.p.readVer());
            }
            g.standup();
        }
    }
}
}}}


Screenshot :

<img src="http://robobuilderlib.googlecode.com/files/demo.png" width="80%" >

Note you need to add http://robobuildervc.googlecode.com/files/RobobuilderLib.dll in reference section

= Forms based=

Here's an example using forms. 

From scratch - create a new windows form project. Within the window form add a button. And then on the button1_click event call connect("COM1"); Also add the connect function as part of the forms application - As with Console based apps you need to add to the "using section" for the IO ports and the RobobuilderLib to reference section.

The code looks something like this (call with pn would be set to name of COM port):
{{{
using System;
using System.Windows.Forms;
using System.IO;
using System.IO.Port;
using RobobuilderLib;

namespace Demo
{
    public partial class Form1 : Form
    {
       public Form1()
       {
            InitializeComponent();
       }

       private void button1_Click(object sender, EventArgs e)
       {
             connect("COM1");
       }

       public int connect(string pn)
       {
            string serialNumber = "";

            try
            {
                SerialPort p = new SerialPort(pn, 115200, Parity.None, 8, StopBits.One);

                p.ReadTimeout = 1000;
                p.WriteTimeout = 1000;

                PCremote pcr = new PCremote(p);

                p.Open();

                serialNumber = pcr.readSN();

                p.Close();

                return 1;
            }
            catch (Exception e1)
            {
                return 0;
            }
        }
    }
}
}}}

More example functions to read the PSD should be:

{{{string res = pcr.readDistance();}}}

or read accelerometer:

{{{ int[] result = pcr.readXYZ();}}}

Or to run a motion (in this case basic pose) put:

{{{pcr.runMotion(7); }}}