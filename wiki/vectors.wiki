# RobobuilderLib.vectors  methods

= Introduction =

static vectors class to make handling arrays easier


= Details =

{{{
RobobuilderLib.vectors.add(int[], int[]) 
RobobuilderLib.vectors.add(int[], byte[]) 
RobobuilderLib.vectors.add(double[], double[]) 
RobobuilderLib.vectors.append(int[], int[]) 
RobobuilderLib.vectors.append(double[], double[]) 
RobobuilderLib.vectors.average(int[]) 
RobobuilderLib.vectors.average(double[]) 
RobobuilderLib.vectors.bcheck(int[], byte[], byte[]) RobobuilderLib.vectors.compare(int[], int[]) 
RobobuilderLib.vectors.convByte(int[]) 
RobobuilderLib.vectors.convByte(double[]) 
RobobuilderLib.vectors.convByte(object[]) 
RobobuilderLib.vectors.convDouble(object[]) 
RobobuilderLib.vectors.convDouble(int[]) 
RobobuilderLib.vectors.convDouble(byte[]) 
RobobuilderLib.vectors.convInt(byte[]) 
RobobuilderLib.vectors.convInt(object[]) 
RobobuilderLib.vectors.convInt(double[]) 
RobobuilderLib.vectors.dotprod(int[], int[]) 
RobobuilderLib.vectors.dotprod(double[], double[]) 
RobobuilderLib.vectors.equals(int[], int[]) 
RobobuilderLib.vectors.match(int[][], int[]) 
RobobuilderLib.vectors.maxItem(double[]) 
RobobuilderLib.vectors.maxItem(int[]) 
RobobuilderLib.vectors.maxValue(double[]) 
RobobuilderLib.vectors.maxValue(int[]) 
RobobuilderLib.vectors.normal(int[]) 
RobobuilderLib.vectors.normal(double[]) 
RobobuilderLib.vectors.random(int, double, double) 
RobobuilderLib.vectors.random(int, int, int) 
RobobuilderLib.vectors.rms(double[], double[]) 
RobobuilderLib.vectors.scale(double[], double[], double) RobobuilderLib.vectors.str(int[]) 
RobobuilderLib.vectors.str(byte[]) 
RobobuilderLib.vectors.str(double[]) 
RobobuilderLib.vectors.sub(int[], int[]) 
RobobuilderLib.vectors.sub(double[], double[]) 
RobobuilderLib.vectors.sum(double[]) 
RobobuilderLib.vectors.sum(int[]) 
RobobuilderLib.vectors.test()
}}}